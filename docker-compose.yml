version: '3.8'

services:
  ai-fundamentals:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: ai-fundamentals:latest
    container_name: ai-fundamentals-app
    ports:
      - "${SERVER_PORT:-8080}:8080"
    environment:
      - OPEN_AI_API_KEY=${OPEN_AI_API_KEY}
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-prod}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - JVM_MEMORY_OPTS=${JVM_MEMORY_OPTS:--Xms512m -Xmx1024m}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - APPLICATION_VERSION=${APPLICATION_VERSION:-1.0.0}
      - HOSTNAME=${HOSTNAME:-ai-fundamentals-app}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health/liveness"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 90s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1.5G
        reservations:
          cpus: '0.5'
          memory: 512M
    networks:
      - ai-fundamentals-network
    volumes:
      - ai-fundamentals-logs:/app/logs
      - ai-fundamentals-tmp:/app/tmp
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ai-fundamentals.rule=Host(`ai-fundamentals.local`)"
      - "traefik.http.services.ai-fundamentals.loadbalancer.server.port=8080"
      - "traefik.http.routers.ai-fundamentals.middlewares=ai-fundamentals-ratelimit"
      - "traefik.http.middlewares.ai-fundamentals-ratelimit.ratelimit.burst=100"

  # Optional: Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-fundamentals-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ai-fundamentals-network
    profiles:
      - monitoring

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: ai-fundamentals-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - ai-fundamentals-network
    profiles:
      - monitoring
    depends_on:
      - prometheus

  # Optional: Redis for caching (if needed)
  redis:
    image: redis:7-alpine
    container_name: ai-fundamentals-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-changeme}
    volumes:
      - redis-data:/data
    networks:
      - ai-fundamentals-network
    profiles:
      - cache
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

networks:
  ai-fundamentals-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  ai-fundamentals-logs:
    driver: local
  ai-fundamentals-tmp:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  redis-data:
    driver: local
    restart: unless-stopped
    
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped

volumes:
  grafana-storage: